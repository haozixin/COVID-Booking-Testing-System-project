package models;

import com.fasterxml.jackson.databind.node.ObjectNode;
import enums.Path;
import mementos.BookingMemento;
import mementos.IOriginator;
import utility.Utility;
import webServiceAPI.ServicesAdapter;
import webServiceAPI.WebServicesTarget;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.UUID;

public abstract class BookingModel extends EntityModel implements IOriginator {


    public static final String USER_ID_FIELD = "customerId";
    public static final String TESTING_SITE_ID_FIELD = "testingSiteId";

    public static final String SMS_PIN_FIELD = "smsPin";
    public static final String START_TIME_FIELD = "startTime";
    public static final String ADDITIONAL_INFO_FIELD = "additionalInfo";
    public static final String QR_CODE_FIELD = "QRCode";
    public static final String URL_FIELD = "url";
    public static final String HAS_RAT_KIT_FIELD = "hasRATKit";
    public static final String ID_FIELD = "id";


    protected String generateQRCode() {
        //Unique QR Code ( We assume that the QR code will be generated by the third party system)
        // here we just use UUID in java to emulate the QR code
        String uuid = UUID.randomUUID().toString();

        return uuid;
    }

    protected String generateURL() {
        // Unique url ( We assume that the QR code will be generated by the third party system)
        //  here we just use UUID in java to emulate the QR code
        String uuid = UUID.randomUUID().toString();
        String url = "https://Dummy URL/... - " + uuid;
        return url;
    }

    public String getURL() {
        try {
            return entityInfo.findValue(URL_FIELD).asText();
        } catch (NullPointerException e) {
            return null;
        }
    }

    public String getQRCode() {
        try {
            return entityInfo.findValue(QR_CODE_FIELD).asText();
        } catch (NullPointerException e) {
            return null;
        }
    }


    public String getPinCode(){
        try{
            return entityInfo.get(SMS_PIN_FIELD).asText();
        }catch(NullPointerException e){
            return null;
        }

    }

    protected void setSchema(String customerId, String testingSiteId){
        entityInfo.put(USER_ID_FIELD, customerId);
        entityInfo.put(TESTING_SITE_ID_FIELD, testingSiteId);

        String url = generateURL();
        String QRCode = generateQRCode();
        additionalInfo.put(QR_CODE_FIELD, QRCode);
        additionalInfo.put(URL_FIELD, url);

        String time = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(System.currentTimeMillis()));
        entityInfo.put(START_TIME_FIELD, time);

    }

    /**
     * the function could be used when users need to mark that customers don't need QR code to be scanned(since they already have RAT kit)
     */
    public boolean updateRATKitInfo(boolean hasRATKit){
        additionalInfo.put(HAS_RAT_KIT_FIELD, hasRATKit);
        entityInfo.putPOJO(ADDITIONAL_INFO_FIELD, additionalInfo);

        WebServicesTarget webServicesTarget = new ServicesAdapter();
        String json = Utility.buildNestedJson(ADDITIONAL_INFO_FIELD, additionalInfo.toString());
        boolean result = false;
        try {
            result = webServicesTarget.patchData(Path.BOOKING.getPath(), json, getEntityId());
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
        responseMessage = webServicesTarget.getResponseMessage();
        return result;
    }

    private String getEntityId(){
        try {
            return entityInfo.get(ID_FIELD).asText();
        } catch (NullPointerException e) {
            return null;
        }
    }

    public void getBookingByQR(String qrCode){
        // get all the bookings
        ArrayList<ObjectNode> bookingList = new ArrayList<>();
        try {
            ObjectNode[] bookings = webServicesTarget.getAllData(Path.BOOKING.getPath(), null);
            responseMessage = webServicesTarget.getResponseMessage();
            bookingList = new ArrayList<>(Arrays.asList(bookings));

        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
        // if we find it by QR code, we store it in the entityInfo and additionalInfo
        for (ObjectNode booking : bookingList) {
            if (booking.findValue(QR_CODE_FIELD) != null ){
                if (booking.findValue(QR_CODE_FIELD).asText().equals(qrCode)) {
                    updateModel(booking);
                }
            }
        }
    }

    public void setState(ObjectNode entityInfo){
        super.updateModel(entityInfo);
    }

}
